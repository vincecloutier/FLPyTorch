import numpy as np
from scipy.stats import pearsonr
import pandas as pd

# run 1
SV_1 = np.array([18.58035978, 18.38290713, 17.79816145, 19.05175414, 19.08264337])
BV_1  = np.array([3.36727499, 3.27869586, 2.81406335, 3.56837929, 3.49285300])
ABV_Simple_1 = np.array([-0.13069274, -0.09832043, -0.09446989, -0.10965246, -0.12688119])
ABV_Hessian_1 = np.array([-11.54136181, -2.18881949, -4.48050083, 22.10438061, -1.91315184])

# run 2
SV_2 = np.array([11.009800825516383, 12.1204866707325, 12.87049713134766, 13.190137737989431, 12.832213058074318])
BV_2 = np.array([1.9342281632125378, 1.8934939317405224, 2.3709380961954594, 2.5275645963847637, 2.3103569261729717])
ABV_Simple_2 = np.array([-0.08005866827443242, -0.016498841578140855, -0.05849418230354786, -0.09924672939814627, -0.03531101252883673])
ABV_Hessian_2 = np.array([0.2650032243691385, -0.16478648432530463, 0.06989829987287521, -1.2124490106943995, -0.10008517652750015])

# run 3
SV_3 = np.array([12.253050351142884, 13.17384645740191, 12.46543019413948, 11.980830872058867, 12.255001290639246])
BV_3 = np.array([2.338648848235607, 2.516206681728363, 1.9834763407707214, 1.728651575744152, 2.261749766767025])
ABV_Simple_3 = np.array([-0.08103475254029036, -0.06752362055703998, -0.06569859199225903, -0.07842215523123741, -0.12380065489560366])
ABV_Hessian_3 = np.array([-0.5892025236971676, 0.8815575689077377, -1.3419723911210895, -0.39801762998104095, 0.24055970087647438])

# run 4 
SV_4 = np.array([0.6853471255964719, 0.36546755939249087, 0.3912367483926218, 0.6402888614506943, 0.6077805340763125, -0.4160488671726651, -0.8999308839676872, 0.43583493601708423, 0.6168157488107681, 0.1994997508469093])
BV_4 = np.array([0.1229695298243314, -0.0544863345567137, 0.07372642518021166, 0.045340262819081545, -0.14273474062792957, -0.15506184054538608, -0.12890616315416992, -0.032884304877370596, 0.19622389250434935, 0.11434059496968985])
ABV_Simple_4 = np.array([-0.00949458422837779, -0.014029751357156783, -0.009114681568462402, -0.005346542238839902, -0.01153560083184857, -0.009069712716154754, -0.008579106550314464, -0.008494190304190852, -0.007515391902416013, -0.007661666488274932])
ABV_Hessian_4 = np.array([-0.010961509382468648, -0.015012400734121911, -0.00961667179944925, -0.004828609366086312, -0.010663141205441207, -0.008163256279658526, -0.008197326067602262, -0.008549771926482208, -0.007306931816856377, -0.008168012805981562])

SV = np.concatenate((SV_1, SV_2, SV_3, SV_4))
BV = np.concatenate((BV_1, BV_2, BV_3, BV_4))
ABV_Simple = np.concatenate((ABV_Simple_1, ABV_Simple_2, ABV_Simple_3, ABV_Simple_4))
ABV_Hessian = np.concatenate((ABV_Hessian_1, ABV_Hessian_2, ABV_Hessian_3, ABV_Hessian_4))

def log_transform(vector):
    return [np.log(abs(x) + 1e-10) for x in vector]           

SV_norm = log_transform(SV)
BV_norm = log_transform(BV)
ABV_Simple_norm = log_transform(ABV_Simple)
ABV_Hessian_norm = log_transform(ABV_Hessian)

# create df
data = {
    'SV_norm': SV_norm,
    'BV_norm': BV_norm,
    'ABV_Simple_norm': ABV_Simple_norm,
    'ABV_Hessian_norm': ABV_Hessian_norm
}
df = pd.DataFrame(data)

# calculate and display pcc for each pair
pairs = [
    ('SV_norm', 'BV_norm'),
    ('SV_norm', 'ABV_Simple_norm'),
    ('SV_norm', 'ABV_Hessian_norm'),
    ('BV_norm', 'ABV_Simple_norm'),
    ('BV_norm', 'ABV_Hessian_norm'),
    ('ABV_Simple_norm', 'ABV_Hessian_norm')
]
for pair in pairs:
    x = df[pair[0]]
    y = df[pair[1]]
    pcc, p_value = pearsonr(x, y)
    print(f"PCC between {pair[0]} and {pair[1]}: {pcc:.8f}")