import numpy as np
from scipy.stats import pearsonr
from itertools import combinations
import pandas as pd

# # run 1
# SV_1 = np.array([18.58035978, 18.38290713, 17.79816145, 19.05175414, 19.08264337])
# BV_1  = np.array([3.36727499, 3.27869586, 2.81406335, 3.56837929, 3.49285300])
# ABV_Simple_1 = np.array([-0.13069274, -0.09832043, -0.09446989, -0.10965246, -0.12688119])
# ABV_Hessian_1 = np.array([-11.54136181, -2.18881949, -4.48050083, 22.10438061, -1.91315184])

# # run 2
# SV_2 = np.array([11.009800825516383, 12.1204866707325, 12.87049713134766, 13.190137737989431, 12.832213058074318])
# BV_2 = np.array([1.9342281632125378, 1.8934939317405224, 2.3709380961954594, 2.5275645963847637, 2.3103569261729717])
# ABV_Simple_2 = np.array([-0.08005866827443242, -0.016498841578140855, -0.05849418230354786, -0.09924672939814627, -0.03531101252883673])
# ABV_Hessian_2 = np.array([0.2650032243691385, -0.16478648432530463, 0.06989829987287521, -1.2124490106943995, -0.10008517652750015])

# # run 3
# SV_3 = np.array([12.253050351142884, 13.17384645740191, 12.46543019413948, 11.980830872058867, 12.255001290639246])
# BV_3 = np.array([2.338648848235607, 2.516206681728363, 1.9834763407707214, 1.728651575744152, 2.261749766767025])
# ABV_Simple_3 = np.array([-0.08103475254029036, -0.06752362055703998, -0.06569859199225903, -0.07842215523123741, -0.12380065489560366])
# ABV_Hessian_3 = np.array([-0.5892025236971676, 0.8815575689077377, -1.3419723911210895, -0.39801762998104095, 0.24055970087647438])

# # run 4 
# SV_4 = np.array([0.6853471255964719, 0.36546755939249087, 0.3912367483926218, 0.6402888614506943, 0.6077805340763125, -0.4160488671726651, -0.8999308839676872, 0.43583493601708423, 0.6168157488107681, 0.1994997508469093])
# BV_4 = np.array([0.1229695298243314, -0.0544863345567137, 0.07372642518021166, 0.045340262819081545, -0.14273474062792957, -0.15506184054538608, -0.12890616315416992, -0.032884304877370596, 0.19622389250434935, 0.11434059496968985])
# ABV_Simple_4 = np.array([-0.00949458422837779, -0.014029751357156783, -0.009114681568462402, -0.005346542238839902, -0.01153560083184857, -0.009069712716154754, -0.008579106550314464, -0.008494190304190852, -0.007515391902416013, -0.007661666488274932])
# ABV_Hessian_4 = np.array([-0.010961509382468648, -0.015012400734121911, -0.00961667179944925, -0.004828609366086312, -0.010663141205441207, -0.008163256279658526, -0.008197326067602262, -0.008549771926482208, -0.007306931816856377, -0.008168012805981562])

# # run 5
# SV_5 = np.array([21.200692872206368, 20.290300538142525, 18.29287751515707, 18.518959810336437, 19.96221705277761])
# BV_5 = np.array([4.368480360135436, 3.5060064550489187, 3.420060744509101, 3.370748547837138, 3.729299930855632])
# ABV_Simple_5 = np.array([-0.14190599333960563, -0.13736365363001823, -0.13463305355980992, -0.195363684091717, -0.2715932675637305])
# ABV_Hessian_5 = np.array([0.03711909428238869, -4.786993084475398, -1.861567020881921, -0.34303118009120226, -8.772277430165559])

# # run 6
# SV_6 = np.array([21.20838432610035, 17.243939966956773, 19.293758860230447, 17.604720439513525, 20.803201815485952])
# BV_6 = np.array([4.630118535831571, 3.098222317174077, 3.6581609938293695, 2.9011269118636847, 4.343663671985269])
# ABV_Simple_6 = np.array([-0.252908140886575, -0.1916605313308537, -0.13323891162872314, -0.1529602175578475, -0.19026290765032172])
# ABV_Hessian_6 = np.array([10.902005398645997, -3.2941554114222527, 0.5628887340426445, -11.958879477810115, 6.165129677392542])


# # NON IID:

# run 1
SV_1 = np.array([51.94018467466037, -152.38468930919964, 34.550906868775684, 74.95488950808844, 48.135864925384524])
BV_1 = np.array([28.754750717431307, -68.53220153972507, 9.66251378878951, 36.27867444977164, 14.902543138712645])
ABV_Simple_1 = np.array([-0.5439083948731422, 2.4101843019016087, -1.1935855061747134, -0.9179589077830315, -0.8993495181202888])
ABV_Hessian_1 = np.array([-84.9389717578888, 888.5217587728985, -173.2397143454291, -134.64825029671192, -147.58307456970215])

# run 2
SV_2 = np.array([39.61599662899971, -155.39201865593594, 48.69321717818578, 65.33503355582555, 3.64445570111275])
BV_2 = np.array([23.38154834881425, -71.77866810932755, 37.185031812638044, 49.37169436737895, 3.403681505471468])
ABV_Simple_2 = np.array([-0.974465360166505, 1.0364722853992134, -0.6570353079587221, -1.5049171298742294, -1.0432743371929973])
ABV_Hessian_2 = np.array([-131.98020244878717, 292.0011628495995, -22.887168645858765, -310.6693787574768, -130.76709339185618])

# run 3
SV_3 = np.array([21.10254747900699, 25.84467408571924, -59.461896728286604, -50.33843098192928, 33.794307135163805, 34.21674032173458, 38.84830444332159, 21.65099198898627, -54.436927262516285, 20.182196347107965])
BV_3 = np.array([10.864786333753727, 12.17410336586181, -8.061997071490623, -4.998885948094539, 15.58451136725489, 14.666214472730644, 14.104073340422474, 9.774313205271028, -0.7875688528874889, 11.33161981694866])
ABV_Simple_3 = np.array([-0.3961140786996111, -0.40773287089541554, 0.40265769325196743, 0.6314994897693396, -0.47356167109683156, -0.42012476787203923, -0.7884028442203999, -1.0300641590729356, -0.07080002030124888, -0.4222401201550383])
ABV_Hessian_3 = np.array([-135.23074696579715, -77.91690596938133, 187.92500355327502, 672.2523601651192, 24.38029476860538, -135.1846563933068, -185.2880972623825, -214.57706624269485, 0.7963986928225495, -31.79980340556358])

# run 4
SV_4 = np.array([32.37248202761014, 29.78623312811057, 66.83741740485033, 68.22748478849729, -132.88931504289312])
BV_4 = np.array([14.475662803277373, 14.309227438643575, 30.664559857919812, 30.592596283182502, -57.63394936360419])
ABV_Simple_4 = np.array([-0.8043317906558514, -0.5997522866819054, -1.6176419891417027, -1.9363783311564475, 0.9965738451573998])
ABV_Hessian_4 = np.array([-12.768686950206757, -39.0908035452012, -291.3098087310791, -437.9766823325772, 679.718955840217])

# run 5
SV_5 = np.array([45.05930993457636, 11.615378424525268, 42.18016035358112, -133.38636776308218, 51.51715576152007])
BV_5 = np.array([28.025799026712775, 6.954035354778171, 25.896717900410295, -48.897823387756944, 29.607383584603667])
ABV_Simple_5 = np.array([-2.2799746934324503, -0.8310717768035829, -2.598738130182028, 1.664172123593744, -3.315087762195617])
ABV_Hessian_5 = np.array([-912.5669484138489, 4.274452638812363, -852.5805515348911, 3284.6109557034797, -1687.7736330921762])

# run 6
SV_6 = np.array([49.24684857626756, 35.0031641304493, 57.01478659411272, 108.26814380089442, -186.5771561582883])
BV_6 = np.array([18.735398894175887, 15.676057631149888, 33.532457476481795, 64.07766917534173, -79.53752298466861])
ABV_Simple_6 = np.array([-0.7527464320883155, -1.2249233778566122, -0.6404937021434307, -0.32460213359445333, 0.8850489999167621])
ABV_Hessian_6 = np.array([-282.42213731911033, -312.0936218574643, -45.20972087979317, -1.223077123053372, 975.1716728708707])


SV = np.concatenate((SV_1, SV_2, SV_3, SV_4, SV_5))
BV = np.concatenate((BV_1, BV_2, BV_3, BV_4, BV_5))
ABV_Simple = np.concatenate((ABV_Simple_1, ABV_Simple_2, ABV_Simple_3, ABV_Simple_4, ABV_Simple_5))
ABV_Hessian = np.concatenate((ABV_Hessian_1, ABV_Hessian_2, ABV_Hessian_3, ABV_Hessian_4, ABV_Hessian_5))

def log_transform(vector):
    return [np.log(abs(x) + 1e-10) for x in vector]           

best_pcc_sum = -np.inf
best_combination = None

for i in range(1, 7):
    for combination in combinations(range(1, 7), i):
        # apply log transform to the selected combinations
        print(f"Combination: {combination}")
        transformed_SV = SV.copy()
        for index in combination:
            start, end = globals()[f"SV_{index}"].shape[0] * (index - 1), globals()[f"SV_{index}"].shape[0] * index
            transformed_SV[start:end] = log_transform(SV[start:end])

            # Calculate PCCs
        pcc_simple, _ = pearsonr(transformed_SV, ABV_Simple)
        pcc_hessian, _ = pearsonr(transformed_SV, ABV_Hessian)
        pcc_sum = pcc_simple + pcc_hessian

        # Update best combination
        if pcc_sum > best_pcc_sum:
            best_pcc_sum = pcc_sum
            best_combination = combination

print(f"Best combination: {best_combination}")
print(f"Maximized PCC sum: {best_pcc_sum}")









# SV_norm = log_transform(SV)
# BV_norm = log_transform(BV)
# ABV_Simple_norm = log_transform(ABV_Simple)
# ABV_Hessian_norm = log_transform(ABV_Hessian)

# # create df
# data = {
#     'SV_norm': SV_norm,
#     'BV_norm': BV_norm,
#     'ABV_Simple_norm': ABV_Simple_norm,
#     'ABV_Hessian_norm': ABV_Hessian_norm
# }
# df = pd.DataFrame(data)

# # calculate and display pcc for each pair
# pairs = [
#     ('SV_norm', 'BV_norm'),
#     ('SV_norm', 'ABV_Simple_norm'),
#     ('SV_norm', 'ABV_Hessian_norm'),
#     ('BV_norm', 'ABV_Simple_norm'),
#     ('BV_norm', 'ABV_Hessian_norm'),
#     ('ABV_Simple_norm', 'ABV_Hessian_norm')
# ]
# for pair in pairs:
#     x = df[pair[0]]
#     y = df[pair[1]]
#     pcc, p_value = pearsonr(x, y)
#     print(f"PCC between {pair[0]} and {pair[1]}: {pcc:.8f}")